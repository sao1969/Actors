{
  "browserLog": false,
  "closeCookieModals": false,
  "debugLog": false,
  "downloadCss": true,
  "downloadMedia": true,
  "excludes": [
    {
      "glob": "/**/*.{png,jpg,jpeg,pdf}"
    }
  ],
  "headless": true,
  "ignoreCorsAndCsp": false,
  "ignoreSslErrors": false,
  "keepUrlFragments": false,
  "linkSelector": "a",
  "pageFunction": "(async function(context) { const { page } = context; await page.waitForSelector('.product-tile-price .primary', { timeout: 10000 }); const products = await page.$$eval('.product-tile', function(tiles) { return tiles.map(function(tile) { const titleEl = tile.querySelector('.product-title-container .title a'); const priceEl = tile.querySelector('.product-tile-price .primary'); const discountEl = tile.querySelector('.product-tile-promo-info .html-content span'); return { title: titleEl ? titleEl.innerText.trim() : null, price: priceEl ? priceEl.innerText.trim() : null, discount: discountEl ? discountEl.innerText.trim() : null }; }); }); return products; })",
  "postNavigationHooks": "// We need to return array of (possibly async) functions here.\\n// The functions accept a single argument: the \"crawlingContext\" object.\\n[\\n    async (crawlingContext) => {\\n        const { page } = crawlingContext;\\n        // ...\\n    },\\n]",
  "preNavigationHooks": "// We need to return array of (possibly async) functions here.\\n// The functions accept two arguments: the \"crawlingContext\" object\\n// and \"gotoOptions\".\\n[\\n    async (crawlingContext, gotoOptions) => {\\n        const { page } = crawlingContext;\\n        // ...\\n    },\\n]",
  "proxyConfiguration": {
    "useApifyProxy": true
  },
  "startUrls": [
    {
      "url": "https://www.woolworths.com.au/shop/search/products?searchTerm=Tim+Tam",
      "method": "GET"
    }
  ],
  "useChrome": false,
  "waitUntil": [
    "networkidle2"
  ]
}

